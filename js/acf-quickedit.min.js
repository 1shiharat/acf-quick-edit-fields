!function(e,i){i.acf_quickedit=qe={form:{},field:{_types:{},add_type:function(e){return qe.field._types[e.type]=qe.field.View.extend(e),qe.field._types[e.type]},factory:function(i,t){var n=e(i).attr("data-field-type"),a=qe.field._types;return field_class=n in a?a[n]:qe.field.View,new field_class({el:i,controller:t})}}},qe.form.View=Backbone.View.extend({initialize:function(){var e=this;this.options=arguments[0],Backbone.View.prototype.initialize.apply(this,arguments),this.fields={},this.$(".inline-edit-col-qed [data-key]").each(function(i,t){var n=qe.field.factory(t,this);e.fields[n.key]=n}),this.loadValues()},loadValues:function(){var i=this;return e.post({url:ajaxurl,data:{action:"get_acf_post_meta",object_id:this.options.object_id,acf_field_keys:Object.keys(this.fields)},success:function(e){_.each(e,function(e,t){i.fields[t].setValue(e)})}}),this},unload:function(e){_.each(this.fields,function(e){e.unload()})}}),qe.form.QuickEdit=qe.form.View.extend({}),qe.form.BulkEdit=qe.form.View.extend({}),qe.field.View=wp.media.View.extend({initialize:function(){Backbone.View.prototype.initialize.apply(this,arguments),this.key=this.$el.attr("data-key"),this.$("input").prop("readonly",!0)},setValue:function(e){return this.$("input").prop("readonly",!1),this.$("input").val(e),this},unload:function(){}})}(jQuery,window);
!function(e,t){var i={type:"file",mediaFrameType:"",events:{"click .select-media":"selectFile","click .remove-media":"removeFile"},initialize:function(){t.field.View.prototype.initialize.apply(this,arguments);var e=this,i=this.$('[type="hidden"]'),a=acf.get("post_id");this.mediaFrameOpts={field:this.key,multiple:!1,post_id:a,library:i.attr("data-library"),mode:"select",type:this.mediaFrameType,select:function(t,i){t&&e.setValue(t.get("id"))}},i.data("mime_types")&&(this.mediaFrameOpts.mime_types=i.data("mime_types"))},selectFile:function(t){t.preventDefault();acf.media.popup(this.mediaFrameOpts);acf.isset(window,"wp","media","view","settings","post")&&e.isNumeric(this.mediaFrameOpts.post_id)&&(wp.media.view.settings.post.id=this.mediaFrameOpts.post_id)},removeFile:function(e){e.preventDefault(),this.setValue("")},setValue:function(e){return this.$('[type="hidden"]').val(e),this}};t.field.add_type(i),t.field.add_type(_.extend(i,{type:"image",mediaFrameType:"image"})),t.field.add_type(i),t.field.add_type({type:"range",events:{'change [type="range"]':"adaptNumber",'mousemove [type="range"]':"adaptNumber",'change [type="number"]':"adaptRange",'mousemove [type="number"]':"adaptRange"},adaptNumber:function(){this.$('[type="number"]').val(this.$('[type="range"]').val())},adaptRange:function(){this.$('[type="range"]').val(this.$('[type="number"]').val())}}),t.field.add_type({type:"date_picker",initialize:function(){t.field.View.prototype.initialize.apply(this,arguments),e("body > #ui-datepicker-div").length>0&&e("body > #ui-datepicker-div").wrap('<div class="acf-ui-datepicker" />');var i=this.$('[type="hidden"]'),a=this.$('[type="text"]');args={dateFormat:this.$el.data("date_format"),altFormat:"yymmdd",altField:i,changeYear:!0,yearRange:"-100:+100",changeMonth:!0,showButtonPanel:!0,firstDay:this.$el.data("first_day")},date=e.datepicker.parseDate("yymmdd",i.val()),a.datepicker(args).datepicker("setDate",date).on("blur",function(){e(this).val()||i.val("")})}}),t.field.add_type({type:"date_time_picker",initialize:function(){t.field.View.prototype.initialize.apply(this,arguments),e("body > #ui-datepicker-div").length>0&&e("body > #ui-datepicker-div").wrap('<div class="acf-ui-datepicker" />');var i=this.$('[type="hidden"]'),a=this.$('[type="text"]');altTimeFormat="HH:mm:ss",args={altField:i,dateFormat:this.$el.data("date_format"),altFormat:"yy-mm-dd",timeFormat:this.$el.data("time_format"),altTimeFormat:altTimeFormat,altFieldTimeOnly:!1,changeYear:!0,yearRange:"-100:+100",changeMonth:!0,showButtonPanel:!0,firstDay:this.$el.data("first_day"),controlType:"select",oneLine:!0},datetime=e.datepicker.parseDateTime("yy-mm-dd",altTimeFormat,i.val()),a.datetimepicker(args).datepicker("setDate",datetime).on("blur",function(){e(this).val()||i.val("")})}}),t.field.add_type({type:"time_picker",initialize:function(){t.field.View.prototype.initialize.apply(this,arguments),e("body > #ui-datepicker-div").length>0&&e("body > #ui-datepicker-div").wrap('<div class="acf-ui-datepicker" />');var i=this,a=this.$('[type="hidden"]'),d=this.$('[type="text"]'),p={timeFormat:this.$el.data("time_format"),altTimeFormat:"HH:mm:ss",altField:a,altFieldTimeOnly:!1,showButtonPanel:!0,controlType:"select",oneLine:!0},r=e.datepicker.parseTime("HH:mm:ss",a.val());d.timepicker(p).on("blur",function(){e(this).val()||a.val("")}),a.val()&&d.val(e.datepicker.formatTime(i.$el.data("time_format"),r))}}),t.field.add_type({type:"color_picker",initialize:function(){t.field.View.prototype.initialize.apply(this,arguments),this.$input=this.$('[type="text"]').first().wpColorPicker()},setValue:function(e){this.$input.prop("readonly",!1),this.$input.wpColorPicker("color",e)},unload:function(){try{this.$input.wpColorPicker("close")}catch(e){}}})}(jQuery,acf_quickedit);
!function(i,t){if("undefined"!=typeof inlineEditPost){var e=inlineEditPost.edit,n=inlineEditPost.save,d=inlineEditPost.revert;inlineEditPost.edit=function(n){var d,o,r;e.apply(this,arguments),d=0,"object"==typeof n&&(d=parseInt(this.getId(n))),o=i("#edit-"+d),o.is(".quick-edit-row")?r=t.form.QuickEdit:o.is(".bulk-edit-row")&&(r=t.form.BulkEdit),r&&(this.acf_qed_form=new r({el:o.get(0),object_id:d}))},inlineEditPost.revert=function(){return!!this.acf_qed_form&&this.acf_qed_form.unload(),d.apply(this,arguments)},inlineEditPost.save=function(){return!!this.acf_qed_form&&this.acf_qed_form.unload(),n.apply(this,arguments)}}return;var e}(jQuery,window.acf_quickedit);
!function(e){e(".acf-qef-gallery-col").on("mousemove",function(n){var t=(e(this),e(this).find("img"));x=n.offsetX,num=t.length,step=e(this).width()/num,t.each(function(n,t){x>=step*n?e(t).show():e(t).hide()})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
