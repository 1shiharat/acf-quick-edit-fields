!function(e,i){i.acf_quickedit=qe={form:{},field:{_types:{},add_type:function(e){return qe.field._types[e.type]=qe.field.View.extend(e),qe.field._types[e.type]},factory:function(i,t){var a=e(i).attr("data-field-type"),n=qe.field._types;return field_class=a in n?n[a]:qe.field.View,new field_class({el:i,controller:t})}}},qe.form.View=Backbone.View.extend({initialize:function(){var e=this;this.options=arguments[0],Backbone.View.prototype.initialize.apply(this,arguments),this.fields={},this.$(".inline-edit-col-qed [data-key]").each(function(i,t){var a=qe.field.factory(t,this);e.fields[a.key]=a}),this.loadValues()},loadValues:function(){var i=this;return e.post({url:ajaxurl,data:{action:"get_acf_post_meta",object_id:this.options.object_id,acf_field_keys:Object.keys(this.fields)},success:function(e){i.loadedValues(e)}}),this},loadedValues:function(e){var i=this;_.each(e,function(e,t){i.fields[t].setValue(e)}),this.initValidation()},unload:function(e){_.each(this.fields,function(e){e.unload()})},validationComplete:function(e,i){console.log(e);var t=this;return e.valid||_.each(e.errors,function(e){var i=e.input.replace(/^acf\[([0-9a-z_]+)\]$/g,"$1");i in t.fields&&t.fields[i].setError(e.message)}),e},initValidation:function(){var i=this.$el.closest("form"),t=i.find("button.save");acf.update("post_id",this.options.object_id),acf.add_filter("validation_complete",this.validationComplete,10,this),t.click(function(t){return!acf.validation.active||(acf.validation.ignore?(acf.validation.ignore=0,!0):(t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation(),acf.validation.$trigger=e(this),acf.validation.fetch(i),!1))}),t.data("events").click.reverse()}}),qe.form.QuickEdit=qe.form.View.extend({}),qe.form.BulkEdit=qe.form.View.extend({}),qe.field.View=wp.media.View.extend({initialize:function(){var e=this;Backbone.View.prototype.initialize.apply(this,arguments),this.key=this.$el.attr("data-key"),this.$("input").prop("readonly",!0),this.$("*").on("change",function(){e.resetError()})},setValue:function(e){return this.$("input").prop("readonly",!1),this.$("input").val(e),this},setError:function(e){return this.$el.attr("data-error-message",e),this},resetError:function(){return this.$el.removeAttr("data-error-message"),this},unload:function(){}})}(jQuery,window);
!function(t,e){var i={type:"file",mediaFrameType:"",events:{"click .select-media":"selectFile","click .remove-media":"removeFile"},initialize:function(){e.field.View.prototype.initialize.apply(this,arguments);var t=this,i=this.$('[type="hidden"]'),a=acf.get("post_id");this.mediaFrameOpts={field:this.key,multiple:!1,post_id:a,library:i.attr("data-library"),mode:"select",type:this.mediaFrameType,select:function(e,i){e&&t.setValue(e.get("id"))}},i.data("mime_types")&&(this.mediaFrameOpts.mime_types=i.data("mime_types"))},selectFile:function(e){e.preventDefault();acf.media.popup(this.mediaFrameOpts);acf.isset(window,"wp","media","view","settings","post")&&t.isNumeric(this.mediaFrameOpts.post_id)&&(wp.media.view.settings.post.id=this.mediaFrameOpts.post_id)},removeFile:function(t){t.preventDefault(),this.setValue("")},setValue:function(t){return this.$('[type="hidden"]').val(t),this}};e.field.add_type(i),e.field.add_type(_.extend(i,{type:"image",mediaFrameType:"image"})),e.field.add_type(i),e.field.add_type({type:"range",events:{'change [type="range"]':"adaptNumber",'mousemove [type="range"]':"adaptNumber",'change [type="number"]':"adaptRange",'mousemove [type="number"]':"adaptRange"},adaptNumber:function(){this.$('[type="number"]').val(this.$('[type="range"]').val())},adaptRange:function(){this.$('[type="range"]').val(this.$('[type="number"]').val())}}),e.field.add_type({type:"date_picker",initialize:function(){var i=this;return e.field.View.prototype.initialize.apply(this,arguments),t("body > #ui-datepicker-div").length>0&&t("body > #ui-datepicker-div").wrap('<div class="acf-ui-datepicker" />'),this.$input=this.$('[type="text"]'),this.$hidden=this.$('[type="hidden"]'),this.datePickerArgs={dateFormat:this.$("[data-date_format]").data("date_format"),altFormat:"yymmdd",altField:this.$hidden,changeYear:!0,yearRange:"-100:+100",changeMonth:!0,showButtonPanel:!0,firstDay:this.$("[data-first_day]").data("first_day")},this.$input.datepicker(this.datePickerArgs).on("blur",function(){t(this).val()||i.$hidden.val("")}),this},setValue:function(e){return this.$input.prop("readonly",!1),this.$input.datepicker("setDate",t.datepicker.parseDate(this.datePickerArgs.altFormat,e)),this}}),e.field.add_type({type:"date_time_picker",initialize:function(){var i=this;return e.field.View.prototype.initialize.apply(this,arguments),t("body > #ui-datepicker-div").length>0&&t("body > #ui-datepicker-div").wrap('<div class="acf-ui-datepicker" />'),this.$input=this.$('[type="text"]'),this.$hidden=this.$('[type="hidden"]'),this.datePickerArgs={altField:this.$hidden,dateFormat:this.$("[data-date_format]").data("date_format"),altFormat:"yy-mm-dd",timeFormat:this.$("[data-time_format]").data("time_format"),altTimeFormat:"HH:mm:ss",altFieldTimeOnly:!1,changeYear:!0,yearRange:"-100:+100",changeMonth:!0,showButtonPanel:!0,firstDay:this.$("[data-first_day]").data("first_day"),controlType:"select",oneLine:!0},this.$input.datetimepicker(this.datePickerArgs).on("blur",function(){t(this).val()||i.$hidden.val("")}),this},setValue:function(e){console.log(e,this.datePickerArgs.altFormat,this.datePickerArgs.altTimeFormat,typeof e);var i=t.datepicker.parseDateTime(this.datePickerArgs.altFormat,this.datePickerArgs.altTimeFormat,e);return this.$input.prop("readonly",!1),this.$hidden.val(i),this.$input.val(t.datepicker.formatDate(this.datePickerArgs.dateFormat,i)+" "+t.datepicker.formatTime(this.datePickerArgs.timeFormat,i)),this}}),e.field.add_type({type:"time_picker",initialize:function(){var i=this;return e.field.View.prototype.initialize.apply(this,arguments),t("body > #ui-datepicker-div").length>0&&t("body > #ui-datepicker-div").wrap('<div class="acf-ui-datepicker" />'),this.$input=this.$('[type="text"]'),this.$hidden=this.$('[type="hidden"]'),this.datePickerArgs={timeFormat:this.$("[data-time_format]").data("time_format"),altTimeFormat:"HH:mm:ss",altField:this.$hidden,altFieldTimeOnly:!1,showButtonPanel:!0,controlType:"select",oneLine:!0},this.$input.timepicker(this.datePickerArgs).on("blur",function(){t(this).val()||i.$hidden.val("")}),this},setValue:function(e){var i=t.datepicker.parseTime(this.datePickerArgs.altTimeFormat,e);return this.$input.prop("readonly",!1),this.$hidden.val(e),this.$input.val(t.datepicker.formatTime(this.datePickerArgs.timeFormat,i)),this}}),e.field.add_type({type:"color_picker",initialize:function(){e.field.View.prototype.initialize.apply(this,arguments),this.$input=this.$('[type="text"]').first().wpColorPicker()},setValue:function(t){this.$input.prop("readonly",!1),this.$input.wpColorPicker("color",t)},unload:function(){t("body").off("click.wpcolorpicker")}}),e.field.add_type({type:"textarea",initialize:function(){e.field.View.prototype.initialize.apply(this,arguments),this.$input=this.$("textarea").prop("readonly",!0),this.$input.on("keydown keyup",function(t){13!=t.which&&27!=t.which||t.stopPropagation()})},setValue:function(t){this.$input.prop("readonly",!1).val(t)}}),e.field.add_type({type:"checkbox",events:{"click .add-choice":"addChoice",'change [type="checkbox"].custom':"removeChoice"},initialize:function(){e.field.View.prototype.initialize.apply(this,arguments),this.$input=this.$('[type="checkbox"]').prop("readonly",!0)},setValue:function(e){var i=this;this.$input.prop("readonly",!1).val(e),t.isArray(e)?t.each(e,function(t,e){i.$('[type="checkbox"][value="'+e+'"]').prop("checked",!0)}):this.$('[type="checkbox"][value="'+e+'"]').prop("checked",!0)},addChoice:function(t){t.preventDefault();var e=wp.template("acf-qef-custom-choice-"+this.$el.attr("data-key"));this.$("ul").append(e())},removeChoice:function(e){t(e.target).closest("li").remove()}}),e.field.add_type({type:"radio",initialize:function(){var i,a;e.field.View.prototype.initialize.apply(this,arguments),this.$('[type="radio"]').prop("readonly",!0),console.log(this.$("ul.acf-radio-list.other").length),this.$("ul.acf-radio-list.other").length&&(i=this.$('[type="text"]'),this.$('[type="radio"]').on("change",function(e){a=t(this).is('[value="other"]:checked'),i.prop("disabled",!a).prop("readonly",!a)}))},setValue:function(t){this.$('[type="radio"]').prop("readonly",!1),this.$('[type="radio"][value="'+t+'"]').prop("checked",!0)}}),e.field.add_type({type:"select",initialize:function(){e.field.View.prototype.initialize.apply(this,arguments),this.$input=this.$("select").prop("readonly",!0)},setValue:function(t){this.$input.prop("readonly",!1).val(t)}}),e.field.add_type({type:"true_false",initialize:function(){e.field.View.prototype.initialize.apply(this,arguments),this.$('[type="radio"]').prop("readonly",!0)},setValue:function(t){this.$('[type="radio"]').prop("readonly",!1),this.$('[type="radio"][value="'+t+'"]').prop("checked",!0)}})}(jQuery,acf_quickedit);
!function(i,t){if("undefined"!=typeof inlineEditPost){var e=inlineEditPost.edit,n=inlineEditPost.save,d=inlineEditPost.revert;inlineEditPost.edit=function(n){var d,o,r;e.apply(this,arguments),d=0,"object"==typeof n&&(d=parseInt(this.getId(n))),o=i("#edit-"+d),o.is(".quick-edit-row")?r=t.form.QuickEdit:o.is(".bulk-edit-row")&&(r=t.form.BulkEdit),r&&(this.acf_qed_form=new r({el:o.get(0),object_id:d}))},inlineEditPost.revert=function(){return!!this.acf_qed_form&&this.acf_qed_form.unload(),d.apply(this,arguments)},inlineEditPost.save=function(){return!!this.acf_qed_form&&this.acf_qed_form.unload(),n.apply(this,arguments)}}return;var e}(jQuery,window.acf_quickedit);
!function(e){e(".acf-qef-gallery-col").on("mousemove",function(n){var t=(e(this),e(this).find("img"));x=n.offsetX,num=t.length,step=e(this).width()/num,t.each(function(n,t){x>=step*n?e(t).show():e(t).hide()})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
